/* The following code was generated by JFlex 1.7.0 */

/* JFlex example: partial Java language lexer specification */

package lexer;

/**
 * This class is a simple example lexer.
 */

public class Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STATE_NUMBER_INTEGER = 2;
    public static final int STATE_NUMBER_DECIMAL = 4;
    public static final int STATE_NUMBER_FAIL = 6;
    public static final int STATE_COMMENT = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\32\1\31" +
                    "\2\0\1\20\1\0\1\15\1\21\1\26\1\5\1\13\1\14\1\27" +
                    "\1\11\1\4\1\7\11\10\1\25\1\30\1\23\1\16\1\17\2\0" +
                    "\4\6\1\12\1\6\10\6\1\6\13\6\1\22\1\0\1\24\3\0" +
                    "\4\6\1\12\25\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\2\31\2\32\1\30\2\33\2\32\1\34\1\35" +
                    "\1\36\7\0\1\37\1\40\1\32\1\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[53];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\207" +
                    "\0\207\0\275\0\330\0\207\0\207\0\207\0\207\0\207" +
                    "\0\207\0\207\0\207\0\207\0\207\0\207\0\363\0\207" +
                    "\0\207\0\207\0\207\0\207\0\207\0\207\0\u010e\0\207" +
                    "\0\u0129\0\u0144\0\u015f\0\u017a\0\207\0\207\0\u0195\0\207" +
                    "\0\207\0\u01b0\0\u01cb\0\u0129\0\u015f\0\u01e6\0\u0201\0\u021c" +
                    "\0\u0237\0\207\0\207\0\u0252\0\u0252";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[53];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\13\1\17\1\20\1\21\1\22\1\23\1\24" +
                    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34" +
                    "\1\35\1\6\1\36\1\37\2\40\3\36\1\41\1\42" +
                    "\23\36\1\37\2\40\5\36\1\43\21\36\1\10\1\44" +
                    "\2\45\27\10\27\46\1\47\3\46\35\0\1\10\35\0" +
                    "\1\50\33\0\1\13\3\0\1\13\24\0\1\51\1\0" +
                    "\1\52\3\0\1\52\17\0\1\53\2\0\1\40\37\0" +
                    "\2\54\1\55\30\0\2\42\1\55\30\0\2\56\24\0" +
                    "\1\45\57\0\1\57\11\0\1\52\3\0\1\52\47\0" +
                    "\1\60\12\0\2\56\1\0\1\61\37\0\1\62\42\0" +
                    "\1\63\12\0\2\64\2\0\1\65\13\0\1\65\12\0" +
                    "\2\64\22\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[621];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\1\1\2\11\2\1\13\11\1\1\7\11" +
                    "\1\1\1\11\4\1\2\11\1\1\2\11\1\1\7\0" +
                    "\2\11\1\1\1\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[53];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true iff the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuffer string = new StringBuffer();


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 120) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public String yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                switch (zzLexicalState) {
                    case STATE_NUMBER_INTEGER: {
                        yybegin(YYINITIAL);
                        return "unexpected end of file";
                    }  // fall though
                    case 54:
                        break;
                    case STATE_NUMBER_DECIMAL: {
                        yybegin(YYINITIAL);
                        return "unexpected end of file";
                    }  // fall though
                    case 55:
                        break;
                    case STATE_NUMBER_FAIL: {
                        yybegin(YYINITIAL);
                        return "unexpected end of file";
                    }  // fall though
                    case 56:
                        break;
                    case STATE_COMMENT: {
                        yybegin(YYINITIAL);
                        return "unexpected end of file";
                    }  // fall though
                    case 57:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return "illegal character " + yytext();
                    }
                    // fall through
                    case 33:
                        break;
                    case 2: {
                    }
                    // fall through
                    case 34:
                        break;
                    case 3: {
                        return "DIVIDE " + yytext();
                    }
                    // fall through
                    case 35:
                        break;
                    case 4: {
                        return "MULT " + yytext();
                    }
                    // fall through
                    case 36:
                        break;
                    case 5: {
                        return "IDENT " + yytext();
                    }
                    // fall through
                    case 37:
                        break;
                    case 6: {
                        string.setLength(0);
                        yybegin(STATE_NUMBER_DECIMAL);
                        string.append(yytext());
                    }
                    // fall through
                    case 38:
                        break;
                    case 7: {
                        string.setLength(0);
                        yybegin(STATE_NUMBER_INTEGER);
                        string.append(yytext());
                    }
                    // fall through
                    case 39:
                        break;
                    case 8: {
                        return "PERIOD " + yytext();
                    }
                    // fall through
                    case 40:
                        break;
                    case 9: {
                        return "PLUS " + yytext();
                    }
                    // fall through
                    case 41:
                        break;
                    case 10: {
                        return "COMMA " + yytext();
                    }
                    // fall through
                    case 42:
                        break;
                    case 11: {
                        return "QUOTE " + yytext();
                    }
                    // fall through
                    case 43:
                        break;
                    case 12: {
                        return "EQUALS " + yytext();
                    }
                    // fall through
                    case 44:
                        break;
                    case 13: {
                        return "GTHAN " + yytext();
                    }
                    // fall through
                    case 45:
                        break;
                    case 14: {
                        return "MODULO " + yytext();
                    }
                    // fall through
                    case 46:
                        break;
                    case 15: {
                        return "LPAREN " + yytext();
                    }
                    // fall through
                    case 47:
                        break;
                    case 16: {
                        return "LBRACKET " + yytext();
                    }
                    // fall through
                    case 48:
                        break;
                    case 17: {
                        return "LTHAN " + yytext();
                    }
                    // fall through
                    case 49:
                        break;
                    case 18: {
                        return "RBRACKET " + yytext();
                    }
                    // fall through
                    case 50:
                        break;
                    case 19: {
                        return "COLON " + yytext();
                    }
                    // fall through
                    case 51:
                        break;
                    case 20: {
                        return "RPAREN " + yytext();
                    }
                    // fall through
                    case 52:
                        break;
                    case 21: {
                        return "MINUS " + yytext();
                    }
                    // fall through
                    case 53:
                        break;
                    case 22: {
                        return "SCOLON " + yytext();
                    }
                    // fall through
                    case 54:
                        break;
                    case 23: {
                        return "DQUOTE " + yytext();
                    }
                    // fall through
                    case 55:
                        break;
                    case 24: {
                        yybegin(STATE_NUMBER_FAIL);
                    }
                    // fall through
                    case 56:
                        break;
                    case 25: {
                        yybegin(YYINITIAL);
                        return "NUMBER " + string.toString();
                    }
                    // fall through
                    case 57:
                        break;
                    case 26: {
                        string.append(yytext());
                    }
                    // fall through
                    case 58:
                        break;
                    case 27: {
                        yybegin(YYINITIAL);
                        return "badly formed number";
                    }
                    // fall through
                    case 59:
                        break;
                    case 28: {
                        return "EXP " + yytext();
                    }
                    // fall through
                    case 60:
                        break;
                    case 29: {
                        return "ENDTAGHEAD " + yytext();
                    }
                    // fall through
                    case 61:
                        break;
                    case 30: {
                        return "TAGIDENT " + yytext();
                    }
                    // fall through
                    case 62:
                        break;
                    case 31: {
                        yybegin(YYINITIAL);
                    }
                    // fall through
                    case 63:
                        break;
                    case 32: {
                        string.setLength(0);
                        yybegin(STATE_COMMENT);
                        string.append(yytext());
                    }
                    // fall through
                    case 64:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
